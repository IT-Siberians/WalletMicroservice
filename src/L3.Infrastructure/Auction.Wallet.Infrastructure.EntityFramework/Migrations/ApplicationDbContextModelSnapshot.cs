// <auto-generated />
using System;
using Auction.Wallet.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Auction.Wallet.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Freezing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUnfreezing")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("LotId");

                    b.ToTable("Freezings");
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeletedSoftly")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BillId")
                        .IsUnique();

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FromBillId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LotId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ToBillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromBillId");

                    b.HasIndex("LotId");

                    b.HasIndex("ToBillId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Bill", b =>
                {
                    b.OwnsOne("Auction.Common.Domain.ValueObjects.Numeric.Money", "FreeMoney", b1 =>
                        {
                            b1.Property<Guid>("BillId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money")
                                .HasColumnName("FreeMoney");

                            b1.HasKey("BillId");

                            b1.ToTable("Bills");

                            b1.WithOwner()
                                .HasForeignKey("BillId");
                        });

                    b.OwnsOne("Auction.Common.Domain.ValueObjects.Numeric.Money", "FrozenMoney", b1 =>
                        {
                            b1.Property<Guid>("BillId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money")
                                .HasColumnName("FrozenMoney");

                            b1.HasKey("BillId");

                            b1.ToTable("Bills");

                            b1.WithOwner()
                                .HasForeignKey("BillId");
                        });

                    b.Navigation("FreeMoney")
                        .IsRequired();

                    b.Navigation("FrozenMoney")
                        .IsRequired();
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Freezing", b =>
                {
                    b.HasOne("Auction.WalletMicroservice.Domain.Entities.Bill", "Bill")
                        .WithMany("_freezings")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auction.WalletMicroservice.Domain.Entities.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Auction.Common.Domain.ValueObjects.Numeric.Money", "Money", b1 =>
                        {
                            b1.Property<Guid>("FreezingId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money")
                                .HasColumnName("Money");

                            b1.HasKey("FreezingId");

                            b1.ToTable("Freezings");

                            b1.WithOwner()
                                .HasForeignKey("FreezingId");
                        });

                    b.Navigation("Bill");

                    b.Navigation("Lot");

                    b.Navigation("Money")
                        .IsRequired();
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Lot", b =>
                {
                    b.OwnsOne("Auction.Common.Domain.ValueObjects.String.Text", "Description", b1 =>
                        {
                            b1.Property<Guid>("LotId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Description");

                            b1.HasKey("LotId");

                            b1.ToTable("Lots");

                            b1.WithOwner()
                                .HasForeignKey("LotId");
                        });

                    b.OwnsOne("Auction.Common.Domain.ValueObjects.String.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("LotId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Title");

                            b1.HasKey("LotId");

                            b1.ToTable("Lots");

                            b1.WithOwner()
                                .HasForeignKey("LotId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Owner", b =>
                {
                    b.HasOne("Auction.WalletMicroservice.Domain.Entities.Bill", "Bill")
                        .WithOne("Owner")
                        .HasForeignKey("Auction.WalletMicroservice.Domain.Entities.Owner", "BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Auction.Common.Domain.ValueObjects.String.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("Username");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Bill");

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Transfer", b =>
                {
                    b.HasOne("Auction.WalletMicroservice.Domain.Entities.Bill", "FromBill")
                        .WithMany("_transfersFrom")
                        .HasForeignKey("FromBillId");

                    b.HasOne("Auction.WalletMicroservice.Domain.Entities.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId");

                    b.HasOne("Auction.WalletMicroservice.Domain.Entities.Bill", "ToBill")
                        .WithMany("_transfersTo")
                        .HasForeignKey("ToBillId");

                    b.OwnsOne("Auction.Common.Domain.ValueObjects.Numeric.Money", "Money", b1 =>
                        {
                            b1.Property<Guid>("TransferId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money")
                                .HasColumnName("Money");

                            b1.HasKey("TransferId");

                            b1.ToTable("Transfers");

                            b1.WithOwner()
                                .HasForeignKey("TransferId");
                        });

                    b.Navigation("FromBill");

                    b.Navigation("Lot");

                    b.Navigation("Money")
                        .IsRequired();

                    b.Navigation("ToBill");
                });

            modelBuilder.Entity("Auction.WalletMicroservice.Domain.Entities.Bill", b =>
                {
                    b.Navigation("Owner")
                        .IsRequired();

                    b.Navigation("_freezings");

                    b.Navigation("_transfersFrom");

                    b.Navigation("_transfersTo");
                });
#pragma warning restore 612, 618
        }
    }
}
